set $mod Mod4

set $left h
set $down j
set $up k
set $right l

set $term kitty -1 --instance-group sway
# set $term wezterm

# set $menu dmenu_path | dmenu | xargs swaymsg exec --
# set $menu 'rofi -modi run,drun,window -show drun -show-icons'
set $menu 'rofi -show drun'

# Deep color -- do we support it or not?..
# No way yet, at least WebRTC screen sharing fails completely in browsers
output eDP-1 render_bit_depth 8

# Look

# output * bg '/home/d/DropST/Desktop_Backgrounds/Forest_2022-12-03.jpg' fill
# output * bg '/home/d/DropST/Desktop_Backgrounds/cosmos.jpg' fill
# better to use wpaperd

# gaps inner 2
# smart_gaps on
workspace_auto_back_and_forth yes
font "{{ .style.fav_font_name }}" Medium 14
# seat seat0 xcursor_theme FlatbedCursors-White 32
seat seat0 xcursor_theme breeze_cursors 32

show_marks yes
# default_border none
default_border pixel 2
hide_edge_borders --i3 smart
smart_borders smart

# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

include keyboards.conf
include kb_macros.conf

include input_devices.conf

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term
    bindsym $mod+KP_Enter exec $term

    # Kill focused window
    bindsym --to-code $mod+Shift+q kill

    # Start your launcher
    bindsym --to-code $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    # bindsym $mod+Shift+e exec $nag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
    bindsym --to-code $mod+Shift+e exec wlogout
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent

    bindsym $mod+Shift+s sticky toggle

#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

# Idle lock

exec swayidle \
	timeout 300 '{{ .tools.wlr_lock }}' \
	timeout 450 'swaymsg "output * dpms off"' \
	resume 'swaymsg "output * dpms on"' \
	before-sleep '{{ .tools.wlr_lock }}'

# ## Window assignment

assign [class="Gajim$"] 3
assign [class="Psi\+$"] 3
assign [class="Ekiga$"] 3
assign [app_id="telegramdesktop"] 3
assign [app_id="org.telegram.desktop"] 3
assign [app_id="io.github.tdesktop_x64.TDesktop"] 3
assign [class="Ferdium$"] 3
assign [app_id="brave-browser$"] 2
assign [app_id="evoution"] 4
assign [app_id="firefox$"] 2
assign [app_id="thunderbird$"] 4

for_window [app_id="^org.gnome.Nautilus$"] border pixel 2
for_window [app_id="firefox$"] border pixel 2
for_window [app_id="thunderbird$"] border pixel 2
for_window [app_id="brave-browser$"] border pixel 2
for_window [app_id="telegramdesktop"] border pixel 2
for_window [app_id="io.github.tdesktop_x64.TDesktop"] border pixel 2
for_window [class="^Emacs" title="^Speedbar"] floating ebable # can not yet...
# Teams Brave
for_window [app_id="brave-"] border pixel 2

# Terminals & File managers floating
#  for_window [app_id="kitty"]                  floating enable
#  for_window [app_id="foot"]                   floating enable
#  for_window [app_id="org.wezfurlong.wezterm"] floating enable
#  for_window [app_id="Alacritty"]              floating enable
#  for_window [app_id="Thunar"] floating enable
}

# Browser popups
# https://gist.github.com/b0o/f00de53aa44ff53b39f997d83b7b5585
# Chenge JS to ``` ... document.title = `♂ ${document.title}` ... ```
for_window {
  [title="^♂ "] {
    floating enable
  }
}

# ####### Bar
include bar.conf

# ####### Exec session

include /etc/sway/config.d/*

include autoexec.d/*

# ### Highter functionals ###
# bindsym --to-code {
#     $mod+alt+KP_3 exec wtype -P f13 -p f13
#     $mod+alt+KP_4 exec wtype -P f14 -p f14
#     $mod+alt+KP_5 exec wtype -P f15 -p f15
#     $mod+alt+KP_6 exec wtype -P f16 -p f16
#     $mod+alt+KP_7 exec wtype -P f17 -p f17
#     $mod+alt+KP_8 exec wtype -P f18 -p f18
#     $mod+alt+KP_9 exec wtype -P f19 -p f19
# 
#     $mod+alt+KP_0 exec wtype -P f20 -p f20
#     $mod+alt+KP_1 exec wtype -P f21 -p f21
#     $mod+alt+KP_2 exec wtype -P f22 -p f22
# 
#     $mod+alt+ctrl+KP_0 exec wtype -P f20 -p f20
#     $mod+alt+ctrl+KP_1 exec wtype -P f21 -p f21
#     $mod+alt+ctrl+KP_2 exec wtype -P f22 -p f22
#     $mod+alt+ctrl+KP_3 exec wtype -P f23 -p f23
#     $mod+alt+ctrl+KP_4 exec wtype -P f24 -p f24
# }

include colors.conf
